# -*- coding: utf-8 -*-
# Generated by Django 1.11.3 on 2017-07-09 20:22
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import utils.locking


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ConnectionSetting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('ssh_port', models.IntegerField(blank=True, null=True, verbose_name=b'SSH port')),
                ('use_ssh_config', models.BooleanField(default=False, verbose_name=b'Use ssh_config')),
            ],
        ),
        migrations.CreateModel(
            name='Credential',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.IntegerField(choices=[(1, b'Plain text username/password combination'), (2, b'Path to a SSH public/private key pair')])),
                ('description', models.CharField(max_length=100)),
                ('username', models.CharField(blank=True, max_length=100, null=True)),
                ('password', models.CharField(blank=True, max_length=100, null=True)),
                ('path', models.CharField(blank=True, max_length=300, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100, verbose_name=b'Device name')),
                ('label', models.CharField(max_length=4, unique=True, verbose_name=b'Service label')),
                ('hostname', models.CharField(blank=True, max_length=200, verbose_name=b'Host name')),
                ('enabled', models.BooleanField(default=True, verbose_name=b'Config management enabled')),
                ('sync', models.BooleanField(default=True, help_text=b'Disabling this flag does not disable the synchronization for this device. Certain fields cannot be edited if this flag is set.', verbose_name=b'Synchronized with CMDB')),
                ('do_not_use_scp', models.BooleanField(default=False, help_text=b'Use an interactive SSH session instead of SCP. For Fortigate devices, this is a "feature of last resort" (incomplete config).', verbose_name=b'Do not use SCP')),
                ('accept_new_hostkey', models.BooleanField(default=False, help_text=b'Set this flag to accept a changed host key. ', verbose_name=b'Accept new host key once')),
                ('version_info', models.TextField(blank=True, verbose_name=b'Version info')),
                ('last_checksum', models.TextField(blank=True, verbose_name=b'Last checksum')),
                ('known_by_nagios', models.BooleanField(default=False, help_text=b'This flag will be set whenever the device status is requested by Nagios.')),
                ('credential', models.ForeignKey(blank=True, help_text=b'Overrides group default.', null=True, on_delete=django.db.models.deletion.CASCADE, to='configmaster.Credential')),
            ],
            bases=(utils.locking.LockMixin, models.Model),
        ),
        migrations.CreateModel(
            name='DeviceGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name=b'Group name')),
                ('plural', models.CharField(max_length=100)),
                ('enabled', models.BooleanField(default=True, verbose_name=b'Config management enabled for devices in group')),
            ],
        ),
        migrations.CreateModel(
            name='DeviceType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('config_filter', models.TextField(blank=True, help_text=b'List of regular expressions, one per line. Content matched by one of the expressions will be removed from config files before they are committed.<br/>Dot does not match newlines, ^$ match the beginning and end of each line.')),
                ('version_regex', models.CharField(blank=True, help_text=b'Regular expression which extracts version information. The regex is applied to the first five config lines (line per line!).', max_length=120)),
                ('alternative_config_compare', models.BooleanField(default=False, help_text=b'Compare configs using an interactive session (req. for Juniper SSG). If a version retrieval method is present, the version info will be read from the device.')),
                ('checksum_config_compare', models.BooleanField(default=False, help_text=b'Compare configs by interactively querying and comparing a config checksum. Only supported by FortiGate remote hosts.')),
                ('connection_setting', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='configmaster.ConnectionSetting')),
                ('credential', models.ForeignKey(blank=True, help_text=b'Default credential for this device type', null=True, on_delete=django.db.models.deletion.CASCADE, to='configmaster.Credential')),
            ],
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('result', models.IntegerField(choices=[(0, b'Success'), (1, b'Failure')], editable=False)),
                ('output', models.TextField(editable=False)),
                ('long_output', models.TextField(editable=False, null=True)),
                ('result_url', models.TextField(editable=False, null=True)),
                ('device', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='configmaster.Device')),
            ],
            options={
                'get_latest_by': 'date',
            },
        ),
        migrations.CreateModel(
            name='Repository',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('path', models.CharField(max_length=500)),
            ],
            options={
                'verbose_name_plural': 'Repositories',
            },
            bases=(utils.locking.LockMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, default=b'')),
                ('class_name', models.CharField(max_length=100)),
                ('enabled', models.BooleanField(default=True)),
                ('hide_if_successful', models.BooleanField(default=False, help_text=b'Hide in frontend if the task was successful or the device is disabled.')),
                ('result_url', models.CharField(blank=True, help_text=b'A URL which points to the result of a task. Will be displayed in the frontend if the task has been successfully run at least once. <br/>The following placeholders are available: {label}, {hostname}, {device_type}, {repo}, {group}, {group_plural} and {group_path_component}.', max_length=100, null=True, verbose_name=b'Result URL')),
                ('master_task', models.ForeignKey(blank=True, help_text=b'If a master task is set, the Nagios output will be set to "Disabled" if both tasks were unsuccessful.', null=True, on_delete=django.db.models.deletion.CASCADE, to='configmaster.Task')),
            ],
        ),
        migrations.AddField(
            model_name='report',
            name='task',
            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='configmaster.Task'),
        ),
        migrations.AddField(
            model_name='devicetype',
            name='tasks',
            field=models.ManyToManyField(blank=True, to='configmaster.Task'),
        ),
        migrations.AddField(
            model_name='devicegroup',
            name='default_device_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='configmaster.DeviceType'),
        ),
        migrations.AddField(
            model_name='devicegroup',
            name='repository',
            field=models.ForeignKey(blank=True, help_text=b'Config repository for config back tasks', null=True, on_delete=django.db.models.deletion.CASCADE, to='configmaster.Repository'),
        ),
        migrations.AddField(
            model_name='device',
            name='device_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='configmaster.DeviceType'),
        ),
        migrations.AddField(
            model_name='device',
            name='group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='configmaster.DeviceGroup'),
        ),
        migrations.AddField(
            model_name='device',
            name='latest_reports',
            field=models.ManyToManyField(editable=False, related_name='latest_device', to='configmaster.Report'),
        ),
    ]
